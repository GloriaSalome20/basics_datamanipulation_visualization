[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce Manipulated data & visualizations in accordance with the best practices of the field. Looking forward to meeting you all!"
  },
  {
    "objectID": "Preparations_before_visualization.html#creating-a-new-r-script",
    "href": "Preparations_before_visualization.html#creating-a-new-r-script",
    "title": "Getting Familiar with RStudio",
    "section": "Creating a New R Script",
    "text": "Creating a New R Script\n\nStep1Step 2\n\n\nGo to File &gt; New File &gt; R Script\n\n\n\nSave your R script in the folder of desired directory"
  },
  {
    "objectID": "Preparations_before_visualization.html#understanding-r-panes",
    "href": "Preparations_before_visualization.html#understanding-r-panes",
    "title": "Getting Familiar with RStudio",
    "section": "Understanding R Panes",
    "text": "Understanding R Panes\n\nScript PaneConsole PaneEnvironment PanePlots, Files, and Viewer Pane\n\n\nThe Script Pane is where you write and edit your R code. It’s essentially your coding workspace. Here, you can create new scripts, open existing ones, and write or edit R code to perform various tasks like data manipulation, analysis, and visualization.\n\n\n\nHere, you can execute temporary code snippets. The Console Pane is where R executes your code and displays the output. When you run code from the Script Pane, the results, errors, and messages are displayed in the Console Pane. It’s an interactive interface where you can directly interact with R, execute commands, and see immediate results. \n\n\nThe Environment Pane provides a snapshot of your current R environment. It displays information about the objects (variables, functions, data frames) that are currently loaded into your R session. You can see the names, types, dimensions, and values of these objects. This pane is particularly useful for inspecting and managing your workspace during data analysis.\n\n\n\nThis pane serves multiple purposes:\nPlots: When you create plots in R, they are displayed in the Plots Pane. You can interact with the plots, zoom in/out, save them, or export them as images.\nFiles: The Files Pane provides a file browser within RStudio. You can navigate through your directory structure, open files, create new ones, and manage your project files directly from this pane.\nViewer: The Viewer Pane displays HTML content generated by R, such as R Markdown documents, Shiny applications, or HTML visualizations. It allows you to preview these documents within RStudio."
  },
  {
    "objectID": "Preparations_before_visualization.html#managing-libraries",
    "href": "Preparations_before_visualization.html#managing-libraries",
    "title": "Getting Familiar with RStudio",
    "section": "Managing Libraries",
    "text": "Managing Libraries\nFor this workshop, we will need to have the ggplot2 library installed and loaded.\nIn your console panel, run this code:\n\n library(ggplot2)\n\nIf it runs without an error, you have now loaded the ggplot2 library into your workspace. If it throws an error, you have to install it first:\n\n # install.packages(\"ggplot2\")\n library(ggplot2)\n\nIf this doesn’t work, put a red post-it on your computer and someone will assist you."
  },
  {
    "objectID": "Preparations_before_visualization.html#reading-data",
    "href": "Preparations_before_visualization.html#reading-data",
    "title": "Getting Familiar with RStudio",
    "section": "Reading Data",
    "text": "Reading Data\nUsually, you will read data from a file format such as a .csv, Stata, Excel file. However, for simplicity, today we will simply load data from a .RData file called Mabangata_Incidence_2018.RData. You should have received this file in an email, or you can download it here. If neither of those works, put a red post-it on your computer and someone will help you install it from a USB drive.\nOnce it’s on your local machine, double click on the file and it should open in your RStudio session. You will know that it worked if you see two new items in your Environment Pane named df and df_und5. These datasets are imaginary malaria incidence data, by age group, from an imaginary location called Mabangata. This dataset was generated for training purposes by the Malaria Atlas Project and used with permission.\n\n#load(\"Mabangata_Incidence_2018.RData\")\n\nWe can visually inspect these datasets by typing their names into the console:\n\n# df\n# df_und5\n\nBy looking at the data, we see that df contains malaria-related information for each month of 2018:\n\ndate_tested: the month for which data was collected.\nage_group: the age group of data collectiion. Possible values areu5 (under 5), ov5 (over 5), or total\nconf: confirmed malaria cases\npop: population\nincidence: cases per 100,000 people\n\nThe second dataset, df_und5, is df, but subset down to only the u5 age group.\nWe will use both of these datasets for our plotting in the following section."
  },
  {
    "objectID": "Getting_started_with_R.html",
    "href": "Getting_started_with_R.html",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "R is a powerful programming language for statistical computing and graphics. It is one of main programming language used for data science (with other programming languages such as Python and Julia). The following instructions will show you how to install or update R on either a Windows or a Mac computer. Please complete all steps for your machine. If you have any trouble, please reach out to gshirima@ihi.or.tz\n\n\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDownload the Installer\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nComplete Installation\nFollow the instruction in the installation wizard to complete the installation.\n\n\n\n\n\n\n\n\n\n\nStep 1Step 2Step 3Step 4Step 5\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system macOS. \n\n\n\nYou will be directed to a page that looks like this:\n\n\nYou must now select one of two binary packages to install, depending on the age of your computer. Go to the Apple icon in the top left corner of your Mac and select “About This Mac”.\n\n\nWhen you click, a small window will appear giving you information about your computer. Notice what is written next to the “Chip:” label:\n\n \nIf the chip is M1, M2, or M3, click the arm64.pkg installer on the R installation page. If the chip does not say M1, M2, or M3, clicke the x86_64.pkg installer.\n\n\nDownload the Installer\nDownload the R installer (~100 MB). When it has installed, click on it in your “Downloads” folder.\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard. When the installation is complete, you may be prompted to delete the installer file. If you are prompted, press “Yes”. If you are not prompted, you can delete the installer .pkg file manually."
  },
  {
    "objectID": "Getting_started_with_R.html#on-windows",
    "href": "Getting_started_with_R.html#on-windows",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "Step 1Step 2Step 3Step 4Step 5Step 6\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDownload the Installer\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nComplete Installation\nFollow the instruction in the installation wizard to complete the installation."
  },
  {
    "objectID": "Getting_started_with_R.html#on-macos",
    "href": "Getting_started_with_R.html#on-macos",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "Step 1Step 2Step 3Step 4Step 5\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system macOS. \n\n\n\nYou will be directed to a page that looks like this:\n\n\nYou must now select one of two binary packages to install, depending on the age of your computer. Go to the Apple icon in the top left corner of your Mac and select “About This Mac”.\n\n\nWhen you click, a small window will appear giving you information about your computer. Notice what is written next to the “Chip:” label:\n\n \nIf the chip is M1, M2, or M3, click the arm64.pkg installer on the R installation page. If the chip does not say M1, M2, or M3, clicke the x86_64.pkg installer.\n\n\nDownload the Installer\nDownload the R installer (~100 MB). When it has installed, click on it in your “Downloads” folder.\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard. When the installation is complete, you may be prompted to delete the installer file. If you are prompted, press “Yes”. If you are not prompted, you can delete the installer .pkg file manually."
  },
  {
    "objectID": "Getting_started_with_R.html#using-the-graphic-interface",
    "href": "Getting_started_with_R.html#using-the-graphic-interface",
    "title": "Installing/Updating R and RStudio",
    "section": "Using the Graphic Interface",
    "text": "Using the Graphic Interface\n\nStep 1Step 2Step 3\n\n\nOpen RStudio on your computer.\n\n\nIn RStudio, you can install a new package by selecting Tools &gt; Install packages… \n\n\nEnter the name of the package you want to install, or browse through available packages. Select the desired package(s) and click Install to add them to your R environment."
  },
  {
    "objectID": "Getting_started_with_R.html#using-the-rstudio-console",
    "href": "Getting_started_with_R.html#using-the-rstudio-console",
    "title": "Installing/Updating R and RStudio",
    "section": "Using the RStudio Console",
    "text": "Using the RStudio Console\n\nStep 1Step 2Step 3Step 4\n\n\nOpen RStudio on your computer.\n\n\nIn the “Console” tab (at the bottom left of the screen if using the default settings), type install.packages(\"PACKAGE_NAME\"), with the name of the package instead of the letters “PACKAGE_NAME”. Don’t forget the quotation marks! For example, to install the tidyverse package, type install.packages(\"tidyverse\"):\n\n\n\nYou should see a series of text scrolling down the screen (there might be a lot!), followed by a message saying that “the downloaded binary packages are in [location]”.\n\n\n\n\n\n\nTip\n\n\n\nThere should not be any error messages in this process! If you run into errors, try installing via the user interface. If there are still problems, contact the AMMnet team for support.\n\n\n\n\n\nTest the successful installation by “loading” the package into the console.\nType the words find.package(\"PACKAGE_NAME\") into the console. If the package installed successfully, you should see a filepath to the location of the package. If the package didn’t install successfully, you’ll see an error message. Below, you can see an example with a successfully installed package (tidyverse) and a package that has not been installed (fake_package).\n\n\n\n\n\n\nTip\n\n\n\nIf you run into errors, try installing via the user interface. If there are still problems, contact the AMMnet team for support."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Basic_Visualization_concept.html",
    "href": "Basic_Visualization_concept.html",
    "title": "Making Plots with ggplot2",
    "section": "",
    "text": "In this first section we aim to perform data cleaning and manipulate the data to a subset that will be usefull to our analysis. We aim to have a small subset that that we will use it for our visualization section. Using dplyr package in R to perform data filtering,renaming, sample,arrange/sort,creating new columns and summarising the large dataset.\n\n\n\n\n\n\nTip\n\n\n\nThe beauty of the dplyr package is its functions are easy to learn and remember eg. for filtering the data we use filter()\n\n\nWe start by cleaning the enviroment and calling the library we intend to use\n\nremove(list=objects())\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(lme4)\nlibrary(bbmle)\nlibrary(lmtest)\nlibrary(gridExtra)\n\nOur dataset is a csv file we read the data using the directory/path and name it df\n\ndf&lt;- read.csv(\"C:/Users/shirgl/Desktop/SwissTPH/Trainings/NIMRI_MAPEA/Amelia_vis_workshop/clean_routine_data.csv\")\n\n\n\n\n\nWhen we clean dataset, we check if there empty entries, duplicates, outliers and ensure we deal with all these before begining your analysis or visualization.\n\nNA / empty entriesSolving the missing\n\n\n\n# in the whole data set\nis.na(df)\n\n#sum of null\nsum(is.na(df))\ncolSums(is.na(df))\n\n# in a specific column\nwhich(is.na(df$test_total))\n\n\n\ncan be solved by droping the observation and sometimes replacing with 999. we will drop the row with one entry that has an NA\n\ndf_NAomitted&lt;- na.omit(df)\ndf2_NAommited&lt;- df %&gt;% drop_na()\n\n\n\n\n\n\n\nsome observations can be a complete duplicate, this means all the column entries are similar. To deal with duplicates we take the unique observations in the dataset.\n\nDuplicatesDealing with duplicates\n\n\nchecking for duplicates and dropping\n\nduplicated(df)\nsum(duplicated(df))\n\n\n\n\n#remove duplicate by unique or distinct\ndf_clean&lt;-unique(df_NAomitted)\n\nalso a function dinstict() can be used to deal with duplicates removing a whole observation that is duplicated or a variable with duplicate."
  },
  {
    "objectID": "Basic_Visualization_concept.html#data-cleaning",
    "href": "Basic_Visualization_concept.html#data-cleaning",
    "title": "Making Plots with ggplot2",
    "section": "",
    "text": "When we clean dataset, we check if there empty entries, duplicates, outliers and ensure we deal with all these before begining your analysis or visualization.\n\nNA / empty entriesSolving the missing\n\n\n\n# in the whole data set\nis.na(df)\n\n#sum of null\nsum(is.na(df))\ncolSums(is.na(df))\n\n# in a specific column\nwhich(is.na(df$test_total))\n\n\n\ncan be solved by droping the observation and sometimes replacing with 999. we will drop the row with one entry that has an NA\n\ndf_NAomitted&lt;- na.omit(df)\ndf2_NAommited&lt;- df %&gt;% drop_na()\n\n\n\n\n\n\n\nsome observations can be a complete duplicate, this means all the column entries are similar. To deal with duplicates we take the unique observations in the dataset.\n\nDuplicatesDealing with duplicates\n\n\nchecking for duplicates and dropping\n\nduplicated(df)\nsum(duplicated(df))\n\n\n\n\n#remove duplicate by unique or distinct\ndf_clean&lt;-unique(df_NAomitted)\n\nalso a function dinstict() can be used to deal with duplicates removing a whole observation that is duplicated or a variable with duplicate."
  },
  {
    "objectID": "Basic_Visualization_concept.html#connected-operations",
    "href": "Basic_Visualization_concept.html#connected-operations",
    "title": "Making Plots with ggplot2",
    "section": "connected operations",
    "text": "connected operations\nIn dplyr some operations are connected, with group by function instead of showing all the groups/ categories one by one it gives you the groups available and with summarise() function you are able to display various statistical results of the groups. ::: panel-tabset\n\ngroup_by\n\n\nsummarise\n\n\nmutate\ncreating a new variable confirmed cases per 1000 :::\n\narrange/sort"
  },
  {
    "objectID": "Basic_Visualization_concept.html#main-objective",
    "href": "Basic_Visualization_concept.html#main-objective",
    "title": "Making Plots with ggplot2",
    "section": "Main Objective",
    "text": "Main Objective\nAt the end of the training we will be able to produce this plot:"
  },
  {
    "objectID": "Basic_Visualization_concept.html#ggplot2-a-layered-approach-to-plotting",
    "href": "Basic_Visualization_concept.html#ggplot2-a-layered-approach-to-plotting",
    "title": "Making Plots with ggplot2",
    "section": "ggplot2: A Layered Approach to Plotting",
    "text": "ggplot2: A Layered Approach to Plotting\n\n\n\n\n\n\nAim:\n\n\n\n\nLearn about the layered approach of ggplot.\nUnderstand how each layer adds elements to the plot.\n\n\n\nThe ggplot library is a powerful tool for creating data visualizations in R. It follows a layered approach to building plots, where each layer adds additional elements to the plot. Understanding how ggplot works can help you create sophisticated and informative visualizations.\nIn ggplot, you start with a base plot and add layers called “geometries”, or geoms. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization. Once geoms have been added, labels and other customizations can be added in a similar way.\n\nBase Plot: No InformationBase Plot: With DataBase Plot: With x and yAdding PointsAdding Lines\n\n\nEvery plot in ggplot starts with the function ggplot. With no additional information about what to display, it will simply show a grey box:\n\nggplot()\n\n\n\n\n\n\n\n\n\n\nThe ggplot function must include an argument to the dataset we want to plot. Here, we specify that we want to use the df_und5 dataset. But because we have not told the function which columns to plot, it will still only show a grey box:\n\nggplot(data = df_und5)\n\n\n\n\n\n\n\n\n\n\nLet’s say we want to plot the date_tested and incidence columns, with date_tested on the x axis and incidence on the y axis. For this, we have to use a function called aes(). We’ll explain it later, but for now just type in the code. Now, on top of our grey box, there is a layer showing some line breaks and labels mapping our x and y variables. Progress!\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))\n\n\n\n\n\n\n\n\n\n\nNow we’re finally ready to add shapes to our plot using geoms. If we want to represent this data using points we use the function geom_point():\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nAs an additional layer on top of this, we use the function geom_line() to add a line plot:\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\nThe order in which you append your geoms to the main ggplot function matters: whatever you list first will go underneath whatever comes next. For example, observe the difference between these two pieces of code and the plots they produce:\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(size=2) +\n  geom_point(colour=\"red\", size=4) \n\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point(colour=\"red\", size=4) +\n  geom_line(size=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\nIt’s easy and fun to switch layers around in ggplot, but watch out for any dangling + signs at the end of your plots! If you leave a + dangling at the end like this, your code will think that you’re still typing your command and won’t show your plot:\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(size=2) +\n  geom_point(colour=\"red\", size=4) +\nConversely, if you miss a + in the middle, your code will only show you the first part of your plot, then throw an error:\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(size=2) \n  geom_point(colour=\"red\", size=4) \n\n\n\n\n\n\n\n\nExercise\n\n\n\nChange the code below so that the orange points are in front of the blue lines. Watch out for any missing or dangling + signs!\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point(colour=\"orange\", size=4) + \n  geom_line(colour=\"blue\", size=2) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(colour=\"blue\", size=2) +\n  geom_point(colour=\"orange\", size=4)"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customizing-geoms",
    "href": "Basic_Visualization_concept.html#customizing-geoms",
    "title": "Making Plots with ggplot2",
    "section": "Customizing geoms",
    "text": "Customizing geoms\n\n\n\n\n\n\nAim:\n\n\n\n\nAdjust the color, size, shape, and linetype of geom features\n\n\n\nAs we’ve hinted at already in the plots above, you can change the features of your geoms by adding arguments inside of their specific functions. You can see the defaults if you enter these geoms with no additonal arguments:\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line() + \n  geom_point() \n\n\n\n\n\n\n\n\nSome features, such as color and size, are used by both geom_point() and geom_line():\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(colour=\"blue\", size=2) \n\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point(colour=\"blue\", size=2)  \n\n\n\n\n\n\n\n\nOthers are specific to specific geoms, as in the examples below:\n\nlinetype for Linesshape for Points\n\n\nOptions include “blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, and “twodash”.\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"blue\", size=2, linetype=\"dashed\")\n\n\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"red\",size=3,linetype=\"dotted\")\n\n\n\n\n\n\n\n\n\n\nShapes can take any number from 1 to 25.\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_point(colour=\"blue\", size=2, shape=2)\n\n\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_point(colour=\"red\", size=3, shape=4)\n\n\n\n\n\n\n\n\n\n\n\nYou can layer these as before:\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"blue\",size=2,linetype=\"dotted\") +\n  geom_point(colour=\"red\", size=3, shape=4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nModify the code below so that:\n\nthe line is orange, dashed, and size 2\nthe points are green, shape 16, and size 4\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"blue\",size=2,linetype=\"dotted\") +\n  geom_point(colour=\"red\", size=3, shape=4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"orange\",size=2,linetype=\"dashed\") +\n  geom_point(colour=\"green\", size=4, shape=16)"
  },
  {
    "objectID": "Basic_Visualization_concept.html#mapping-aesthetics-with-the-aes-function",
    "href": "Basic_Visualization_concept.html#mapping-aesthetics-with-the-aes-function",
    "title": "Making Plots with ggplot2",
    "section": "Mapping Aesthetics with the aes() Function",
    "text": "Mapping Aesthetics with the aes() Function\n\n\n\n\n\n\nAim:\n\n\n\n\nUnderstand the role of the aes function in ggplot.\nLearn when to use aes to map variables to aesthetics.\n\n\n\nIn the presentation, we learned that all visualizations are mappings of information from abstract numbers into visual concepts like location, shape, color, etc.\nThe aes() function is used whenever we want to map variables in our dataset to aesthetic properties such as x and y axes, colors, shapes, etc. It is one of the most confusing aspects of ggplot, but also one of the most powerful once you get used to it.\n\nx and y\naes() can take many arguments (see the documentation for a full list), but you’ve already seen the most crucial ones: x and y. These arguments are always necessary for ggplot to understand which variables to show on the two-dimensional screen.\n\nSwitching x and yDifferent x and y\n\n\nthe aes in the base position and altering the variables of x axis and y axis\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = incidence, y = date_tested,)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = pop)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a scatter plot using the df_und5 dataset, with date (date_tested) on the x axis and confirmed cases (conf) on the y axis.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = conf)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor\nTo understand mappings beyond x and y, let’s move away from the df_und5 dataset and start using the full df dataset. We can start with a simple scatter plot:\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point( )\n\n\n\n\n\n\n\n\nNow, instead of a single time series, we have three time series: one for each age group. But it’s hard to differentiate them right now because they’re all the same shape and size. It would be nice if we could make each age group a different color, using the age_group column name. How do you think we could do this?\nLet’s try a few options:\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(colour=age_group)\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(colour=\"age_group\")\nNeither of these works, because we are mapping a variable in our dataset to a feature of our plot (here, color). So we need to put color inside an aes() function within our geom:\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(aes(colour=age_group))\n\n\n\n\n\n\n\n\nA ton of cool things just happened! Ggplot turned each age group a different color, picked some nice default colors, and gave us a helpful legend. We can do the same with a line plot:\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_line(aes(colour=age_group))\n\n\n\n\n\n\n\n\n\n\nOther Aesthetics\nWe can take any of the variables we used outside of aes and map them to variables inside of aes:\n\nColorShapeSizeLinetype\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(aes(colour=age_group))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(shape=age_group))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=age_group))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_line(aes(linetype=age_group))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nCreate the following plot: \n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_line(aes(size=age_group))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen you map a color to a continuous variable instead of a categorical one, the color scheme changes to something continuous:\n\nggplot(data = df, aes(x = date_tested, y = incidence, color = incidence)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThere are many, many ways to customize the colors of your plots. Going into detail is beyond the scope of this workshop."
  },
  {
    "objectID": "Basic_Visualization_concept.html#mixing-and-matching-aesthetics",
    "href": "Basic_Visualization_concept.html#mixing-and-matching-aesthetics",
    "title": "Making Plots with ggplot2",
    "section": "Mixing and Matching Aesthetics",
    "text": "Mixing and Matching Aesthetics\nYou can put multiple aesthetics inside of one aes function:\n\nSame VariableDifferent VariablesDifferent Variables in Different geoms\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=age_group, colour=age_group))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=incidence, shape=age_group))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(colour=age_group)) +\n  geom_point(aes(size=incidence, shape=age_group))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nIn the plot above, why are the points black instead of in color?\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\n\nWrite a code snippet to create the following plot:\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(linetype=age_group)) +\n  geom_point(aes(color=age_group))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\n\nWrite a code snippet to create the following plot:\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(color=age_group)) +\n  geom_point()"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication",
    "href": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication",
    "title": "Making Plots with ggplot2",
    "section": "Customizing Plots for Presentation and Publication",
    "text": "Customizing Plots for Presentation and Publication\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.\n\n\nWith our last exercise, we almost created our goal plot for the session:\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(color=age_group)) +\n  geom_point()\n\n\n\n\n\n\n\n\nAll that’s left to do is adjust the themes and labeling.\nCustomizing plots is essential for making them more visually appealing and informative for presentation or publication.\nElements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.\n\nThemeTitle and Axis Labels\n\n\nThere are a number of different built-in themes you can select to modify the background color and overall appearance of your plot.\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  theme_dark()\n\n\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\nYou can use the labs function to modify the axis labels, legend labels, and title:\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  labs(x=\"Month\", \n       y=\"Incidence\") \n\n\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  labs(x=\"Month\", \n       y=\"Incidence\",\n       title=\"Malaria 2018\",\n       color=\"Age Group\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nCreate the following plot:\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point()+\n  labs(x=\"Month\", \n       y=\"Incidence (Cases/100,000)\",\n       title=\"Malaria Incidence, Mabangata Region, 2018\",\n       colour=\"Age Group\") +\n  theme_bw() \n\n\n\n\n\n\n\n\n\n\n\nAnd there it is! We’ve gone from a set of numbers on a page to a nice, polished figure ready for a presentation.\nWe’ve only scratched the surface of what you can do with ggplot2 today, but we hope we’ve given you a strong basis and you’ll be able to learn more in the future!"
  },
  {
    "objectID": "information.html",
    "href": "information.html",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce Manipulated data & visualizations in accordance with the best practices of the field. Looking forward to meeting you all!"
  },
  {
    "objectID": "information.html#before-the-workshop",
    "href": "information.html#before-the-workshop",
    "title": "Installing/Updating R and RStudio",
    "section": "Before the Workshop",
    "text": "Before the Workshop\nPlease install R, RStudio, and the ggplot2 library following these installation instructions. If you have any trouble installing I will be in the venue 30 min before the session where you can come for assistance. Installation might take 15 minutes or more even on a good internet connection, so please install ahead of time!\n\n\n\n\n\n\nNote\n\n\n\n\nAll software used in this workshop is free."
  },
  {
    "objectID": "information.html#after-the-workshop",
    "href": "information.html#after-the-workshop",
    "title": "Installing/Updating R and RStudio",
    "section": "After the Workshop",
    "text": "After the Workshop\nFill out the online post-workshop questionnaire that will be provided after the session."
  },
  {
    "objectID": "index.html#before-the-workshop",
    "href": "index.html#before-the-workshop",
    "title": "Installing/Updating R and RStudio",
    "section": "Before the Workshop",
    "text": "Before the Workshop\nPlease install R, RStudio, and the ggplot2 library following these installation instructions. If you have any trouble installing I will be in the venue 30 min before the session where you can come for assistance. Installation might take 15 minutes or more even on a good internet connection, so please install ahead of time!\n\n\n\n\n\n\nNote\n\n\n\n\nAll software used in this workshop is free."
  },
  {
    "objectID": "index.html#after-the-workshop",
    "href": "index.html#after-the-workshop",
    "title": "Installing/Updating R and RStudio",
    "section": "After the Workshop",
    "text": "After the Workshop\nFill out the online post-workshop questionnaire that will be provided after the session."
  }
]